/*!

@page ocs2_doc_installation Installation

\section ocs2_doc_requirements Requirements
This library is written in C++11. It is tested under Ubuntu 18.04 with
library versions as provided in the package sources.

\subsection ocs2_doc_dep Dependencies
- C++ compiler with C++11 support
- <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen (v3.3)</a>
- <a href="http://www.boost.org/=Main_Page">Boost C++ (v1.54)</a>
- catkin
- <a href="https://www.gnu.org/software/glpk/">GLPK</a>
  \code{.sh}
  sudo apt install libglpk-dev
  \endcode
- `catkin-pkg` package for python3. Install with `sudo apt install python3-catkin-tools`
- `pybind11_catkin` ROS package, installable via `sudo apt install ros-noetic-pybind11-catkin`
- Doxygen for documentation. Install with `sudo apt install doxygen doxygen-latex`

\subsection ocs2_doc_dep_optinal Optional Dependencies
- [RaiSim](http://raisim.com) simulator can be used as a provider for rollouts. The corresponding `ocs2_raisim` package has additional requirements:
  - [`raisim`](https://github.com/raisimTech/raisimLib) package, which needs to be installed from source by cloning it into your workspace: 
    \code{.sh}
    git clone --depth 1 https://github.com/raisimTech/raisimLib.git
    \endcode 
    For installation, follow the [instructions](https://raisim.com/sections/Installation.html) of the RaiSim webpage. Alternatively, in order to make the installation easy to find for catkin and easy to uninstall in the future, consider using [`checkinstall`](https://help.ubuntu.com/community/CheckInstall) which will install RaiSim as a debian package. For this, replace the original commands:
    \code{.sh}
    cmake .. -DCMAKE_INSTALL_PREFIX=$LOCAL_INSTALL <other options>
    make install -j4
    \endcode
    with:
    \code{.sh}
    cmake .. <other options>     (Without INSTALL_PREFIX)
    make -j4 && sudo checkinstall
    \endcode
    This will install RaiSim at the default location of `/usr/local/lib` which will also be automatically detected by catkin.
    When asked by `checkinstall`, change the package name to something appropriate (e.g. "raisim") to it find later for package management, such as for uninstallation (`dpkg -r <package_name>`).
  - [`grid_map_msgs`](https://github.com/ANYbotics/grid_map) catkin package, which may be installed with `sudo apt install ros-melodic-grid-map-msgs`.
- [RaisimOgre](https://github.com/leggedrobotics/raisimOgre) Visualizer for Raisim. Can be used for debugging purposes to see if conversions between OCS2 and Raisim are correct.
- For pinocchio (Rigid multi-body dynamics library) and self collision support:
  - clone [pinocchio](https://github.com/leggedrobotics/pinocchio) and [hpp-fcl](https://github.com/leggedrobotics/hpp-fcl) into your workspace (use master branch).
  - `sudo apt install liburdfdom-dev liboctomap-dev libassimp-dev`

\section ocs2_doc_install Installation
\subsection ocs2_doc_build_lib Build the library

\code{.sh}
cd catkin_ws/src
git clone git@bitbucket.org:leggedrobotics/ocs2.git
catkin build -DCMAKE_BUILD_TYPE=RelWithDebInfo
\endcode

To build and run the unit tests run:

\code{.sh}
catkin run_tests ocs2
\endcode

\subsection ocs2_doc_build_doc Build this Documentation

Assuming python catkin tools are installed, run the following command:
\code{.sh}
catkin build ocs2_doc
\endcode

This will build the documentation and place it in the `ocs2_doc/doc/html` folder.

*/
